Программа Tracker расположена в пакете "pavlova"
Программа состоит из пакетов, классов и интерфейсов:

******************************************************************************************************************	 
 
   Пакет "models"
   
      Класс "Comment" - описывает модель комментария
	  включает:
	     поле dateAdd : String - дата добавления (создания) комментария (область видимости private);
		 поле comment : String - текст (значение) самого комментария (область видимости private);
		 
		 конструктор Comment(String comment) - создаёт экземпляр с комментарием;

         методы "геттеры" для получения значений полей;	

      Класс "Item" - описывает модель заявки
	  имеет взаимосвязь с классом Comment в поле comments
      включает:
         поле name : String - имя (название) заявки (область видимости private)	  
   		 поле description : String - описание заявки (область видимости private)	
		 поле dateCreate : String - дата создания заявки (область видимости private)	
		 поле comments : Comment[] - массив комментариев в заявке (область видимости private)
         поле id : String - уникальный ключ для каждой заявки (область видимости private)		 
		 
		 2 конструктора для создания экземпляра заявки
		 
		 геттеры и сеттеры для получения и присвоения полей класса
		
		
******************************************************************************************************************		
		 
   Пакет "database"
   
      Класс "Tracker" - база, для хранения заявок и работы с ними
	  включает:
	     поле items : Items[] - массив всех заявок (область видимости private);
		 поле size : int - размер заполненности массива заявками (область видимости private);
		 
		 метод generateID() : String - генерирует уникальный ключ для заявки
		 метод increaseLength() : void - динамическое увеличение массива в 1,5 раза, если требуется
		 метод reduceLength() : void - динамическое уменьшение массива в 1,5 раза, если требуется
		 метод addItem(item : Item) : boolean - добавляет новую заявку в массив items
		 метод removeItem(item : Item) : boolean - удаляет заявку из массива items
		 метод editItem(item : Item) : boolean - редактирует заявку в массиве items по ссылке
		 метод getItems() : Item[] - возвращает массив всех заявок
		 метод getItems(key : String; value : String) : Item[] - возвращает массив определённых заявок по ключу и значению
		 метод findById(id : String) : Item - ищет заявку по полю id и возвращает ссылку на эту заявку или null
		 метод getIndexItem(item : Item) : int - возвращает индекс в массиве входящей ссылки на заявку
		 метод addComment(item : Item) : boolean - добавляет новый комментарий к заявке по ссылке
		 
		 
******************************************************************************************************************	

   Пакет "Input"

      Интерфейс "Input" - шаблон (контракт), по которому будут написанны классы работы с данными пользователя и для тестов
      шаблон метода ask(question : String) : String	- запрос данных от пользователя с ожиданием типа String
      шаблон перегруженного метода ask(question : String; startRange : int; endRange : int) : int - запрос данных от пользователя
          с диапазооном ограничения и ожиданием примитивного типа int	  
		  
	 
     Класс "ConsoleInput" - имплементируемый от интерфейса "Input" и реализируещий его методы
     Класс для работы с консолью, имеющий поле scanner : Scanner 

     Класс "ValidateInput" - наследник класса "ConsoleInput"
     Класс служит для работы с ошибками ввода. Отслеживает исключительные ситуации

     Класс "StubInput" - имплементируемый от интерфейса "Input"	и реализующий его методы
     Класс служит для эмуляции ввода пользователем для тестов	
     включает дополнительно:
        поле answers : String[]	- массив вариаций ответов для методов ask
        поле position : int - позиция в массиве		
		 
		 
******************************************************************************************************************			 
	
	Пакет "menu"	

        Интерфейс "UserAction" - шаблон (контракт), по которому будут реализованы классы пунктов меню
        шаблон метода key() : int - возвращает ключ (номер) пункта меню
        шаблон метода execute(tracker : Tracker; input : Input) : void - выполняет команду данного меню
        шаблон метода info() : String - возвращает текстовое значение наименования меню (Пример: "1. Добавить заявку")

		Класс "MenuTracker" - класс управлением меню, выводом меню на экран
		   содержит:
		      поле input : Input - ссылка на класс работы с консолью или эмулированными данными 
			  поле tracker : Tracker - ссылка на базу хранения заявок и методов работы с ними
			  поле actions : UserAction[] - массив ссылок на пункты меню
			  
			  метод fillActions() : void - заполняем массив actions ссылками
			  метод select(key : int) : void - выполняет действие по ключу (ключ по сути индекс в массиве actions)
			  метод show() : void - выводим меню в консоль
			  метод isExit() : boolean - выходим ли из программы или нет на данный момент
		
		
        Классы, имплементируемые от интерфейса "UserAction" и внутренние для класса "MenuTracker":
           Класс "AddItem" - пункт меню для добавления новой заявки
           Класс "DeleteItem" - пункт меню для удаления заявки		   
		   Класс "EditItem" - пункт меню для редактирования	заявки
		   Класс "AddComment" - пункт меню для добавления комментария к заявке	
		   Класс "ShowItems" - пункт меню для вывода всех заявок в консоль	
		   Класс "ShowItemsByFilter" - пункт меню для вывода заявок в консоль по фильтру
		   Класс "ExitProgram" - пункт меню для завершения работы программы	
		 
		 
******************************************************************************************************************			 
	
	Пакет "menu"
	
	   Класс "StartUI" - главный класс для старта программы
	   содержит:
	      поле input : Input - ссылка на объект работы с консолью или эмуляцией данных
          
          метод init() : void - создаёт экземпляры необходимых объектов, выводит меню, выполняет команды
          метод main(agrs : String[]) : void - точка входа программы. Запускает программу		  
	
		 
		 
		 
		 
		 
		 
		 
		 
		 